"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAdmins = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const getGroup_1 = require("./getGroup");
const updateGroup_1 = require("./updateGroup");
const addAdmins = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, admins, account = null, signer = null, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        if (!admins || admins.length === 0) {
            throw new Error("Admin address array cannot be empty!");
        }
        admins.forEach((admin) => {
            if (!(0, helpers_1.isValidETHAddress)(admin)) {
                throw new Error(`Invalid admin address: ${admin}`);
            }
        });
        const group = yield (0, getGroup_1.getGroup)({
            chatId: chatId,
            env,
        });
        // TODO: look at user did in updateGroup
        const convertedMembers = (0, helpers_2.getMembersList)(group.members, group.pendingMembers);
        // TODO: look at user did in updateGroup
        const adminsToBeAdded = admins.map((admin) => (0, helpers_1.walletToPCAIP10)(admin));
        adminsToBeAdded.forEach((admin) => {
            if (!convertedMembers.includes(admin)) {
                convertedMembers.push(admin);
            }
        });
        const convertedAdmins = (0, helpers_2.getAdminsList)(group.members, group.pendingMembers);
        adminsToBeAdded.forEach((admin) => {
            if (convertedAdmins.includes(admin)) {
                throw new Error(`Admin ${admin} already exists in the list`);
            }
        });
        convertedAdmins.push(...adminsToBeAdded);
        return yield (0, updateGroup_1.updateGroup)({
            chatId: chatId,
            groupName: group.groupName,
            groupImage: group.groupImage,
            groupDescription: group.groupDescription,
            members: convertedMembers,
            admins: convertedAdmins,
            scheduleAt: group.scheduleAt,
            scheduleEnd: group.scheduleEnd,
            status: group.status,
            account: account,
            signer: signer,
            env: env,
            pgpPrivateKey: pgpPrivateKey
        });
    }
    catch (err) {
        console.error(`[Push SDK] - API  - Error - API ${exports.addAdmins.name} -:  `, err);
        throw Error(`[Push SDK] - API  - Error - API ${exports.addAdmins.name} -: ${err}`);
    }
});
exports.addAdmins = addAdmins;
//# sourceMappingURL=addAdmins.js.map