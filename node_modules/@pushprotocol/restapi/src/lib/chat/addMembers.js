"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMembers = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../helpers");
const constants_1 = require("../constants");
const helpers_2 = require("./helpers");
const getGroup_1 = require("./getGroup");
const updateGroup_1 = require("./updateGroup");
/**
 * Update Group information
 */
const addMembers = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { chatId, members, account = null, signer = null, env = constants_1.default.ENV.PROD, pgpPrivateKey = null, } = options || {};
    try {
        if (account == null && signer == null) {
            throw new Error(`At least one from account or signer is necessary!`);
        }
        if (!members || members.length === 0) {
            throw new Error("Member address array cannot be empty!");
        }
        members.forEach((member) => {
            if (!(0, helpers_1.isValidETHAddress)(member)) {
                throw new Error(`Invalid member address: ${member}`);
            }
        });
        const group = yield (0, getGroup_1.getGroup)({
            chatId: chatId,
            env,
        });
        const convertedMembers = (0, helpers_2.getMembersList)(group.members, group.pendingMembers);
        const membersToBeAdded = members.map((member) => (0, helpers_1.walletToPCAIP10)(member));
        membersToBeAdded.forEach((member) => {
            if (convertedMembers.includes(member)) {
                throw new Error(`Member ${member} already exists in the list`);
            }
        });
        convertedMembers.push(...membersToBeAdded);
        const convertedAdmins = (0, helpers_2.getAdminsList)(group.members, group.pendingMembers);
        return yield (0, updateGroup_1.updateGroup)({
            chatId: chatId,
            groupName: group.groupName,
            groupImage: group.groupImage,
            groupDescription: group.groupDescription,
            members: convertedMembers,
            admins: convertedAdmins,
            scheduleAt: group.scheduleAt,
            scheduleEnd: group.scheduleEnd,
            status: group.status,
            account: account,
            signer: signer,
            env: env,
            rules: group.rules,
            meta: group.meta,
            pgpPrivateKey: pgpPrivateKey,
        });
    }
    catch (err) {
        console.error(`[Push SDK] - API  - Error - API ${exports.addMembers.name} -:  `, err);
        throw Error(`[Push SDK] - API  - Error - API ${exports.addMembers.name} -: ${err}`);
    }
});
exports.addMembers = addMembers;
//# sourceMappingURL=addMembers.js.map