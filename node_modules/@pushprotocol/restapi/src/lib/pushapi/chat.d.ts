import { ENV } from '../constants';
import { GroupAccess, GroupDTO, IFeeds, MessageWithCID, SignerType, Message, ProgressHookType, IUser, IMessageIPFS } from '../types';
import { GroupUpdateOptions, ChatListType, GroupCreationOptions, ManageGroupOptions } from './pushAPITypes';
export declare class Chat {
    private account;
    private decryptedPgpPvtKey;
    private env;
    private signer;
    private progressHook?;
    private userInstance;
    constructor(account: string, decryptedPgpPvtKey: string, env: ENV, signer: SignerType, progressHook?: ((progress: ProgressHookType) => void) | undefined);
    list(type: `${ChatListType}`, options?: {
        /**
         * @default 1
         */
        page?: number;
        limit?: number;
    }): Promise<IFeeds[]>;
    latest(target: string): Promise<{}>;
    history(target: string, options?: {
        reference?: string | null;
        limit?: number;
    }): Promise<IMessageIPFS[]>;
    send(recipient: string, options: Message): Promise<MessageWithCID>;
    decrypt(messagePayloads: IMessageIPFS[]): Promise<IMessageIPFS[]>;
    accept(target: string): Promise<string>;
    reject(target: string): Promise<void>;
    block(users: Array<string>): Promise<IUser>;
    unblock(users: Array<string>): Promise<IUser>;
    group: {
        create: (name: string, options?: GroupCreationOptions) => Promise<GroupDTO>;
        permissions: (chatId: string) => Promise<GroupAccess>;
        info: (chatId: string) => Promise<GroupDTO>;
        update: (chatId: string, options: GroupUpdateOptions) => Promise<GroupDTO>;
        add: (chatId: string, options: ManageGroupOptions) => Promise<GroupDTO>;
        remove: (chatId: string, options: ManageGroupOptions) => Promise<GroupDTO>;
        join: (target: string) => Promise<GroupDTO>;
        leave: (target: string) => Promise<GroupDTO>;
        reject: (target: string) => Promise<void>;
    };
}
