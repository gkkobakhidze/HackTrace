"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddress = exports.signTypedData = exports.signMessage = void 0;
const tslib_1 = require("tslib");
const signMessage = (signer, message) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Check the signer type using type guards
    if ('signMessage' in signer) {
        // If the signer has a signMessage function with the ethersV5SignerType signature
        if ('_signTypedData' in signer) {
            // It's ethersV5SignerType, use its signMessage function
            const signature = yield signer.signMessage(message);
            return signature;
        }
        else {
            // It's viemSignerType, use its signMessage function
            const signature = yield signer.signMessage({
                message,
                account: signer.account,
            });
            return signature;
        }
    }
    else {
        throw new Error('Invalid signer type provided.');
    }
});
exports.signMessage = signMessage;
const signTypedData = (signer, domain, types, value, primaryType) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Check the signer type using type guards
    if ('_signTypedData' in signer) {
        // It's ethersV5SignerType, use its functions
        const signature = yield signer._signTypedData(domain, types, value);
        return signature;
    }
    else if ('signTypedData' in signer) {
        // It's viemSignerType, use its functions
        const signature = yield signer.signTypedData({
            account: signer.account,
            domain,
            types,
            primaryType: primaryType,
            message: value,
        });
        return signature;
    }
    else {
        throw new Error('Invalid signer type provided.');
    }
});
exports.signTypedData = signTypedData;
const getAddress = (signer) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if ('getAddress' in signer) {
        return yield signer.getAddress();
    }
    else {
        return (_a = signer.account['address']) !== null && _a !== void 0 ? _a : '';
    }
});
exports.getAddress = getAddress;
//# sourceMappingURL=signer.js.map